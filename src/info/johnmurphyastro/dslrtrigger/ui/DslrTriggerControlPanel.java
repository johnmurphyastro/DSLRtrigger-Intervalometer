/*
 * DSLR Trigger is designed to control a DSLR camera to providing accurate
 * start and end exposure times
 * Copyright (C) 2018 - 2019  John Murphy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package info.johnmurphyastro.dslrtrigger.ui;

import javax.swing.JOptionPane;
import info.johnmurphyastro.dslrtrigger.Version;
import info.johnmurphyastro.dslrtrigger.data.MinTime;
import java.text.NumberFormat;
import javax.swing.text.NumberFormatter;
import javax.swing.JFormattedTextField;

/**
 * Main user control panel for the DSLR Trigger program
 *
 * @author John Murphy
 */
class DslrTriggerControlPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    private UiController uiController;
    private final HelpDialog helpDialog = new HelpDialog();

    /**
     * Creates new form DSLRcontroPanel
     */
    DslrTriggerControlPanel() {
        initComponents();
    }

    void setUiController(UiController ui) {
        uiController = ui;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        aboutButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        mirrorLockTextfield = new JFormattedTextField(getFloatFormatter());
        fireIntervalTextfield = new JFormattedTextField(getFormatter(1, 1));
        exposureTextfield = new JFormattedTextField(getFloatFormatter());
        yearTextfield = new JFormattedTextField(getFormatter(4));
        monthTextfield = new JFormattedTextField(getFormatter(2));
        dayTextfield = new JFormattedTextField(getFormatter(2));
        hourTextfield = new JFormattedTextField(getFormatter(2));
        minuteTextfield = new JFormattedTextField(getFormatter(2));
        secondTextfield = new JFormattedTextField(getFormatter(2));
        numberOfShotsTextfield = new JFormattedTextField(getFormatter(1,1));

        jLabel1.setText("Start after:");
        jLabel1.setToolTipText("If this date/time is in the future, start capture at this time.");

        serialPortCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12", "COM13", "COM14", "COM15", "COM16", "COM17", "COM18", "COM19", "COM20" }));

        exposureLabel.setText("Exposure / s:");
        exposureLabel.setToolTipText("Bulb mode: sets exposure time. Other modes: exposure time must not exceed this value.");

        timeIntervalLabel.setText("Fire interval / s:");
        timeIntervalLabel.setToolTipText("Time from start of first shot to start of next shot.");

        jLabel5.setText("Shots:");
        jLabel5.setToolTipText("Number of shots to take.");

        jLabel6.setText("Log folder:");
        jLabel6.setToolTipText("Location of exposure start time log file.");

        chooseLogFolder.setText("...");
        chooseLogFolder.setToolTipText("Show folder browser.");
        chooseLogFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseLogFolderActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        logFolderTextfield.setEditable(false);
        logFolderTextfield.setText("C:\\");

            aboutButton.setText("About");
            aboutButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    aboutButtonActionPerformed(evt);
                }
            });

            jLabel8.setText("Time");

            jLabel9.setText("Date");

            logFilenameTextfield.setText("RemoveDebris");
            logFilenameTextfield.setToolTipText("Log filename prefix (RD or ISS, Dark, Bias etc.)");

            helpButton.setText("Help");
            helpButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    helpButtonActionPerformed(evt);
                }
            });

            progressTextfield.setEditable(false);
            progressTextfield.setText("0.0s");
            progressTextfield.setMinimumSize(new java.awt.Dimension(105, 30));
            progressTextfield.setPreferredSize(new java.awt.Dimension(105, 30));

            jLabel2.setText("Time / Shots taken:");

            jLabel7.setText("Filename:");
            jLabel7.setToolTipText("Log filename prefix (RD_ or ISS_, Dark_, Bias_ etc.)");

            mirrorLockLabel.setText("Mirror Lock / s:");
            mirrorLockLabel.setToolTipText("Mirror lock up time (seconds)");

            bulbCheckBox.setText("Bulb mode");
            bulbCheckBox.setToolTipText("Tick if the camera is in Bulb mode");

            testShotCheckbox.setText("Single test shot");
            testShotCheckbox.setToolTipText("Ignore 'Start After' time and take a single shot.");
            testShotCheckbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    testShotCheckboxActionPerformed(evt);
                }
            });

            SettingsButton.setText("Settings");
            SettingsButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    SettingsButtonActionPerformed(evt);
                }
            });

            jLabel11.setText("Switch:");

            plus1minuteButton.setText("+1 minute");
            plus1minuteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    plus1minuteButtonActionPerformed(evt);
                }
            });

            mirrorLockCheckBox.setText("Mirror Lock");
            mirrorLockCheckBox.setToolTipText("Tick if the camera is set to use Mirror Lock.");
            mirrorLockCheckBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    mirrorLockCheckBoxActionPerformed(evt);
                }
            });

            mirrorLockTextfield.setText("0.5");
            mirrorLockTextfield.setToolTipText("Mirror lock up time (seconds)");
            mirrorLockTextfield.setMinimumSize(new java.awt.Dimension(45, 30));
            mirrorLockTextfield.setPreferredSize(new java.awt.Dimension(45, 30));

            fireIntervalTextfield.setText("5");
            fireIntervalTextfield.setToolTipText("Time from start of first shot to start of next shot.");
            fireIntervalTextfield.setMinimumSize(new java.awt.Dimension(45, 30));
            fireIntervalTextfield.setPreferredSize(new java.awt.Dimension(45, 30));

            exposureTextfield.setText("1");
            exposureTextfield.setToolTipText("Bulb mode: sets exposure time. Other modes: exposure time must not exceed this value.");
            exposureTextfield.setMinimumSize(new java.awt.Dimension(45, 30));
            exposureTextfield.setPreferredSize(new java.awt.Dimension(45, 30));

            yearTextfield.setText("2020");
            yearTextfield.setToolTipText("");
            yearTextfield.setMinimumSize(new java.awt.Dimension(45, 30));
            yearTextfield.setPreferredSize(new java.awt.Dimension(45, 30));

            monthTextfield.setText("12");
            monthTextfield.setToolTipText("");
            monthTextfield.setMinimumSize(new java.awt.Dimension(31, 30));
            monthTextfield.setPreferredSize(new java.awt.Dimension(31, 30));

            dayTextfield.setText("28");
            dayTextfield.setToolTipText("");
            dayTextfield.setMinimumSize(new java.awt.Dimension(31, 30));
            dayTextfield.setPreferredSize(new java.awt.Dimension(31, 30));

            hourTextfield.setText("23");
            hourTextfield.setToolTipText("");
            hourTextfield.setMinimumSize(new java.awt.Dimension(31, 30));
            hourTextfield.setPreferredSize(new java.awt.Dimension(31, 30));

            minuteTextfield.setText("59");
            minuteTextfield.setToolTipText("");
            minuteTextfield.setMinimumSize(new java.awt.Dimension(31, 30));
            minuteTextfield.setPreferredSize(new java.awt.Dimension(31, 30));

            secondTextfield.setText("59");
            secondTextfield.setToolTipText("");
            secondTextfield.setMinimumSize(new java.awt.Dimension(31, 30));
            secondTextfield.setPreferredSize(new java.awt.Dimension(31, 30));

            numberOfShotsTextfield.setText("22");
            numberOfShotsTextfield.setToolTipText("Number of shots to take");
            numberOfShotsTextfield.setMinimumSize(new java.awt.Dimension(40, 30));
            numberOfShotsTextfield.setPreferredSize(new java.awt.Dimension(40, 30));

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(startButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(stopButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(exitButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(helpButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(aboutButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6))
                            .addGap(4, 4, 4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(logFolderTextfield)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(chooseLogFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(logFilenameTextfield)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel9))
                                        .addComponent(exposureLabel)
                                        .addComponent(timeIntervalLabel)
                                        .addComponent(mirrorLockLabel))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(fireIntervalTextfield, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(exposureTextfield, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(yearTextfield, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(numberOfShotsTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(27, 27, 27)
                                                    .addComponent(testShotCheckbox))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(monthTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(dayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(15, 15, 15)
                                                            .addComponent(jLabel8))
                                                        .addComponent(bulbCheckBox)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(progressTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(plus1minuteButton)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(hourTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(minuteTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(secondTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(mirrorLockTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(mirrorLockCheckBox)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(SettingsButton))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(serialPortCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(progressTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(serialPortCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9)
                        .addComponent(yearTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(monthTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hourTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minuteTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(secondTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exposureLabel)
                        .addComponent(bulbCheckBox)
                        .addComponent(plus1minuteButton)
                        .addComponent(exposureTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(timeIntervalLabel)
                        .addComponent(jLabel5)
                        .addComponent(testShotCheckbox)
                        .addComponent(fireIntervalTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(numberOfShotsTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mirrorLockLabel)
                        .addComponent(SettingsButton)
                        .addComponent(mirrorLockCheckBox)
                        .addComponent(mirrorLockTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(logFolderTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseLogFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(logFilenameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startButton)
                        .addComponent(stopButton)
                        .addComponent(exitButton)
                        .addComponent(aboutButton)
                        .addComponent(helpButton))
                    .addContainerGap())
            );
        }// </editor-fold>//GEN-END:initComponents

    int getYear() {
        Object obj = yearTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }

    void setYear(int year) {
        this.yearTextfield.setValue(year);
    }
    
    int getMonth() {
        Object obj = monthTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }

    void setMonth(int month) {
        this.monthTextfield.setValue(month);
    }
    
    int getDay() {
        Object obj = dayTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }
    
    void setDay(int day) {
        this.dayTextfield.setValue(day);
    }
    
    int getHour() {
        Object obj = hourTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }

    void setHour(int hour) {
        this.hourTextfield.setValue(hour);
    }

    int getMinute() {
        Object obj = minuteTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }

    void setMinute(int minute) {
        this.minuteTextfield.setValue(minute);
    }

    int getSeconds() {
        Object obj = secondTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }

    void setSeconds(int seconds) {
        this.secondTextfield.setValue(seconds);
    }

    float getExposure() {
        Object obj = exposureTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).floatValue();
        }
        return 0;
    }

    void setExposure(float exposure) {
        this.exposureTextfield.setValue(exposure);
    }

    int getFireInterval() {
        Object obj = fireIntervalTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }

    void setFireInterval(int fireInterval) {
        this.fireIntervalTextfield.setValue(fireInterval);
    }
    
    float getMirrorLockValue(){
        Object obj = mirrorLockTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).floatValue();
        }
        return 0F;
    }

    void setMirrorLockValue(float value){
        mirrorLockTextfield.setValue(value);
    }
    
    boolean getMirrorLockFlag(){
        return mirrorLockCheckBox.isSelected();
    }
    
    void setMirrorLockFlag(boolean selected) {
        mirrorLockCheckBox.setSelected(selected);
        configureMirrorLockTextfield();
    }

    int getNumberOfShots() {
        Object obj = numberOfShotsTextfield.getValue();
        if (obj instanceof Number){
            return ((Number)obj).intValue();
        }
        return 0;
    }

    void setNumberOfShots(int numberOfShots) {
        this.numberOfShotsTextfield.setValue(numberOfShots);
    }
    
    void enableUi(boolean enabled){
        stopButton.setEnabled(!enabled);
        startButton.setEnabled(enabled);
        bulbCheckBox.setEnabled(enabled);
        dayTextfield.setEditable(enabled);
        exposureTextfield.setEditable(enabled);
        hourTextfield.setEditable(enabled);
        logFilenameTextfield.setEditable(enabled);
        minuteTextfield.setEditable(enabled);
        mirrorLockTextfield.setEditable(enabled);
        monthTextfield.setEditable(enabled);
        numberOfShotsTextfield.setEditable(enabled);
        secondTextfield.setEditable(enabled);
        serialPortCombo.setEnabled(enabled);
        testShotCheckbox.setEnabled(enabled);
        fireIntervalTextfield.setEditable(enabled);
        yearTextfield.setEditable(enabled);
        SettingsButton.setEnabled(enabled);
        chooseLogFolder.setEnabled(enabled);
        plus1minuteButton.setEnabled(enabled);
    }
    
    void testShotAction(){
        boolean enabled = !testShotCheckbox.isSelected();
        numberOfShotsTextfield.setEnabled(enabled);
        yearTextfield.setEnabled(enabled);
        monthTextfield.setEnabled(enabled);
        dayTextfield.setEnabled(enabled);
        hourTextfield.setEnabled(enabled);
        minuteTextfield.setEnabled(enabled);
        secondTextfield.setEnabled(enabled);
    }

    private void chooseLogFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseLogFolderActionPerformed
        uiController.chooseLogFolderAction();
    }//GEN-LAST:event_chooseLogFolderActionPerformed

    /**
     * Disable start button, set progress to zero and start
     *
     * @param evt
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        uiController.startButtonAction();
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Exit the background thread and close files. Enable start button.
     *
     * @param evt
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        uiController.stopButtonAction();
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * Exit background thread, close files, serial ports and then exit
     *
     * @param evt
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        uiController.exitButtonAction();
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Display about box
     *
     * @param evt
     */
    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        JOptionPane.showMessageDialog(this, Version.getAboutMsg(), Version.getTitle(), JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        helpDialog.show(this);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void SettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsButtonActionPerformed
        uiController.showSettingsDialog();
    }//GEN-LAST:event_SettingsButtonActionPerformed

    private void testShotCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testShotCheckboxActionPerformed
        testShotAction();
    }//GEN-LAST:event_testShotCheckboxActionPerformed

    private void plus1minuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plus1minuteButtonActionPerformed
        uiController.plus1minute();
    }//GEN-LAST:event_plus1minuteButtonActionPerformed

    private void mirrorLockCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorLockCheckBoxActionPerformed
        configureMirrorLockTextfield();
    }//GEN-LAST:event_mirrorLockCheckBoxActionPerformed

    private void configureMirrorLockTextfield() {
        mirrorLockTextfield.setEnabled(mirrorLockCheckBox.isSelected());
        if (mirrorLockCheckBox.isSelected()){
            if (getMirrorLockValue() < MinTime.MIRROR_MOVE_MS / 1000.0){
                setMirrorLockValue(MinTime.MIRROR_MOVE_MS / 1000.0F);
            }
        }
    }
  
    private NumberFormatter getFormatter(int nDigits){
        return getFormatter(nDigits, 0);
    }
    
    private NumberFormatter getFormatter(int nDigits, int minValue){
        NumberFormat format = NumberFormat.getInstance();
        format.setGroupingUsed(false);
        format.setMinimumIntegerDigits(nDigits);
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setValueClass(Integer.class);
        formatter.setMinimum(minValue);
        return formatter;
    }
    
    private NumberFormatter getFloatFormatter(){
        NumberFormat format = NumberFormat.getInstance();
        format.setMaximumFractionDigits(3);
        format.setMinimumFractionDigits(1);
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setMinimum(0.0);
        return formatter;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    final javax.swing.JButton SettingsButton = new javax.swing.JButton();
    private javax.swing.JButton aboutButton;
    final javax.swing.JCheckBox bulbCheckBox = new javax.swing.JCheckBox();
    final javax.swing.JButton chooseLogFolder = new javax.swing.JButton();
    private javax.swing.JFormattedTextField dayTextfield;
    final javax.swing.JButton exitButton = new javax.swing.JButton();
    final javax.swing.JLabel exposureLabel = new javax.swing.JLabel();
    private javax.swing.JFormattedTextField exposureTextfield;
    private javax.swing.JFormattedTextField fireIntervalTextfield;
    private javax.swing.JButton helpButton;
    private javax.swing.JFormattedTextField hourTextfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    final javax.swing.JTextField logFilenameTextfield = new javax.swing.JTextField();
    final javax.swing.JTextField logFolderTextfield = new javax.swing.JTextField();
    private javax.swing.JFormattedTextField minuteTextfield;
    private final javax.swing.JCheckBox mirrorLockCheckBox = new javax.swing.JCheckBox();
    final javax.swing.JLabel mirrorLockLabel = new javax.swing.JLabel();
    private javax.swing.JFormattedTextField mirrorLockTextfield;
    private javax.swing.JFormattedTextField monthTextfield;
    private javax.swing.JFormattedTextField numberOfShotsTextfield;
    final javax.swing.JButton plus1minuteButton = new javax.swing.JButton();
    final javax.swing.JTextField progressTextfield = new javax.swing.JTextField();
    private javax.swing.JFormattedTextField secondTextfield;
    final javax.swing.JComboBox<String> serialPortCombo = new javax.swing.JComboBox<>();
    final javax.swing.JButton startButton = new javax.swing.JButton();
    final javax.swing.JButton stopButton = new javax.swing.JButton();
    final javax.swing.JCheckBox testShotCheckbox = new javax.swing.JCheckBox();
    final javax.swing.JLabel timeIntervalLabel = new javax.swing.JLabel();
    private javax.swing.JFormattedTextField yearTextfield;
    // End of variables declaration//GEN-END:variables

}
